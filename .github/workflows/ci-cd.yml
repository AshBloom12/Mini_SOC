# This is Wazuh SIEM stuck deployment workflow onto Docker swarm with Github Actions

name: Wazuh Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This workflow contains 4 jobs called "build", "scan", "test" and "deploy" that run sequentially
jobs:
  # ---------------- BUILD STAGE ----------------
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repository
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Wazuh Docker images
        run: |
          docker build -t ghcr.io/${{ github.repository }}/wazuh-manager:latest ./wazuh/manager
          docker build -t ghcr.io/${{ github.repository }}/wazuh-indexer:latest ./wazuh/indexer
          docker build -t ghcr.io/${{ github.repository }}/wazuh-dashboard:latest ./wazuh/dashboard
      - name: Push images
        run: |
          docker push ghcr.io/${{ github.repository }}/wazuh-manager:latest
          docker push ghcr.io/${{ github.repository }}/wazuh-indexer:latest
          docker push ghcr.io/${{ github.repository }}/wazuh-dashboard:latest
  # ---------------- SECURITY SCAN ----------------
  scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Scan Wazuh Manager
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository }}/wazuh-manager:latest
          trivy-config: trivy/trivy.yaml
          format: json
          output: trivy-manager-report.json
      - name: Scan Wazuh Indexer
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository }}/wazuh-indexer:latest
          trivy-config: trivy/trivy.yaml
          format: json
          output: trivy-indexer-report.json
      - name: Scan Wazuh Dashboard
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository }}/wazuh-dashboard:latest
          trivy-config: trivy/trivy.yaml
          format: json
          output: trivy-dashboard-report.json
      - name: Upload Trivy reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-manager-report.json
            trivy-indexer-report.json
            trivy-dashboard-report.json
  # ---------------- SELENIUM TESTS ----------------
  test:
    needs: scan
    runs-on: ubuntu-latest
    # Use the official selenium/standalone-chrome container to run tests remotely⁠
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          pip install -r tests/selenium/requirements.txt
          pip install requests pytest
      - name: Run Selenium tests
        env:
          WAZUH_DASHBOARD_URL: ${{ secrets.WAZUH_DASHBOARD_URL }}
        run: pytest tests/selenium -v
      - name: Run API health test
        env:
          WAZUH_API_URL: ${{ secrets.WAZUH_API_URL }}
          WAZUH_API_USER: ${{ secrets.WAZUH_API_USER }}
          WAZUH_API_PASS: ${{ secrets.WAZUH_API_PASS }}
        run: pytest tests/api -v
  # -------------------- DEPLOY --------------------
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: serversideup/github-action-docker-swarm-deploy@v3
        with:
          ssh_deploy_private_key: "${{ secrets.SSH_DEPLOY_PRIVATE_KEY }}"
          ssh_remote_hostname: "${{ secrets.SSH_REMOTE_HOSTNAME }}"
          registry: "ghcr.io"
          registry-username: "${{ github.actor }}"
          registry-token: "${{ secrets.GITHUB_TOKEN }}"
          stack_name: "${{ env.PROJECT_NAME }}"
          md5_file_path: "./.infrastructure/conf/traefik/prod/traefik.yml"
          md5_variable_name: "SPIN_MD5_HASH_TRAEFIK_YML"
          env_file_base64: "${{ secrets.ENV_FILE_BASE64 }}"

#-------------SEE THIS---------------------------------------------------
    env:
      WAZUH_MANAGER_IMAGE: ghcr.io/${{ github.repository }}/wazuh-manager:latest
      WAZUH_INDEXER_IMAGE: ghcr.io/${{ github.repository }}/wazuh-indexer:latest
      WAZUH_DASHBOARD_IMAGE: ghcr.io/${{ github.repository }}/wazuh-dashboard:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible docker

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_PRIVATE_KEY }}

      - name: Ensure inventory and vars are ready
        run: |
          echo "[nodes]" > inventory.ini
          echo "node1 ansible_host=${{ secrets.DASHBOARD_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa role=dashboard" >> inventory.ini
          echo "node2 ansible_host=${{ secrets.MANAGER_IP }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa role=manager run_indexer=true" >> inventory.ini

      - name: Run Ansible deploy playbook
        env:
          ANSIBLE_FORCE_COLOR: "true"
        run: |
          ansible-playbook -i inventory.ini playbooks/deploy-wazuh.yml --vault-password-file <(echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}")
