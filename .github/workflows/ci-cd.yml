# This is Wazuh SIEM stuck deployment workflow onto Docker swarm with Github Actions

name: Wazuh Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push event but only for the "main" branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This workflow contains 5 jobs called "lint", "build", "scan", "test" and "deploy" that run sequentially
jobs:
  # ---------------- LINT STAGE -----------------
  lint:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run YAML Lint
      run: yamllint .

    - name: Run Ansible Lint
      run: ansible-lint .

  # ---------------- BUILD STAGE ----------------
  build:
    # Runs after successfully finishing lint job
    needs: lint
    # The type of runner that the job will run on it
    runs-on: self-hosted
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repository
        # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Build images
      - name: Build indexer image
        run: |
          docker build -t ghcr.io/ashbloom12/min-soc/wazuh-indexer:4.12.0 -f docker/indexer/Dockerfile docker/indexer/

      # Push images to GHCR
      - name: Push Wazuh Indexer image
        run: docker push ghcr.io/ashbloom12/min-soc/wazuh-indexer:4.12.0
  # ---------------- SECURITY SCAN ----------------
  scan:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Pull official images (specify a version tag if needed)
      - name: Pull Wazuh images
        run: |
          docker pull wazuh/wazuh-manager:4.12.0
          docker pull wazuh/wazuh-dashboard:4.12.0
          docker pull ghcr.io/ashbloom12/min-soc/wazuh-indexer:4.12.0
      
      - name: Scan Wazuh Manager
        run: |
          trivy image --ignorefile ./trivy/.trivyignore --format json -o trivy-manager-report.json wazuh/wazuh-manager:4.12.0
          trivy image --ignorefile ./trivy/.trivyignore --format table wazuh/wazuh-manager:4.12.0

      - name: Scan Wazuh Indexer
        run: |
          trivy image --ignorefile ./trivy/.trivyignore --format json -o trivy-indexer-report.json ghcr.io/ashbloom12/min-soc/wazuh-indexer:4.12.0
          trivy image --ignorefile ./trivy/.trivyignore --format table ghcr.io/ashbloom12/min-soc/wazuh-indexer:4.12.0

      - name: Scan Wazuh Dashboard
        run: |
          trivy image --ignorefile ./trivy/.trivyignore --format json -o trivy-dashboard-report.json wazuh/wazuh-dashboard:4.12.0
          trivy image --ignorefile ./trivy/.trivyignore --format table wazuh/wazuh-dashboard:4.12.0

      # Always upload reports, even if scan fails
      - name: Upload Trivy reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-dashboard-report.json
            trivy-indexer-report.json
            trivy-manager-report.json

    #  - name: Fail if CRITICAL or HIGH vulnerabilities found
    #    if: always()
    #    run: |
    #      set -e
    #      for report in trivy-manager-report.json trivy-indexer-report.json trivy-dashboard-report.json; do
    #        if jq -e '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL" or .Severity=="HIGH")' "$report" > /dev/null; then
    #          echo "Critical or High vulnerability detected in $report!"
    #          exit 1
    #        fi
    #      done
  # -------------------- DEPLOY --------------------
  deploy:
    needs: scan
    runs-on: self-hosted
   
    env:
      WAZUH_MANAGER_IMAGE: wazuh/wazuh-manager:4.12.0
      WAZUH_INDEXER_IMAGE: ghcr.io/ashbloom12/min-soc/wazuh-indexer:4.12.0
      WAZUH_DASHBOARD_IMAGE: wazuh/wazuh-dashboard:4.12.0
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      GHCR_TOKEN: ${{ secrets.GHCR_PAT }}
      GITHUB_ACTOR: ${{ github.actor }}
      ANSIBLE_FORCE_COLOR: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Pre-flight ping to all nodes
        run: |
          echo -n "$ANSIBLE_VAULT_PASSWORD" > /tmp/vault_pass.txt
          ansible all -m ping --vault-password-file /tmp/vault_pass.txt
          rm -f /tmp/vault_pass.txt
        
      - name: Clean Swarm duplicates on manager
        run: |
          ssh -i /home/ubuntu/.ssh/mini-soc.pem -o StrictHostKeyChecking=no ubuntu@10.0.1.191 'bash -s' <<'EOF'
            set -e
            echo "Cleaning up duplicate and down Swarm nodes..."

            # Get all hostnames with more than one node
            for host in $(docker node ls --format '{{.Hostname}}' | sort | uniq -c | awk '$1>1 {print $2}'); do
              echo "Checking duplicates for $host"
              # Get all node IDs and their status for this hostname
              IDS=$(docker node ls --format '{{.ID}} {{.Hostname}} {{.Status}}' | grep " $host" | awk '{print $1":"$3}')
              KEEP=""
              for entry in $IDS; do
                ID=$(echo $entry | cut -d: -f1)
                STATUS=$(echo $entry | cut -d: -f2)
                if [ "$STATUS" = "Ready" ] && [ -z "$KEEP" ]; then
                  KEEP=$ID
                  echo "Keeping Ready node $ID for $host"
                else
                  echo "Removing duplicate node $ID for $host (status=$STATUS)"
                  docker node rm -f "$ID" || true
                fi
              done
            done

            # Remove any remaining nodes that are not Ready
            for id in $(docker node ls --format '{{.ID}} {{.Status}}' | awk '$2 != "Ready" {print $1}'); do
              echo "Force removing non-Ready node $id"
              docker node rm -f $id || true
            done

            echo "Swarm cleanup complete."
          EOF

      - name: Run Ansible deploy playbook
        run: |
          echo -n "$ANSIBLE_VAULT_PASSWORD" > /tmp/vault_pass.txt
          ansible-playbook ansible/playbooks/deploy.yml --vault-password-file /tmp/vault_pass.txt
          rm -f /tmp/vault_pass.txt

      # Post-deploy checks
      - name: Verify services in Swarm
        run: |
          echo -n "$ANSIBLE_VAULT_PASSWORD" > /tmp/vault_pass.txt
          ansible node1 -m shell -a "docker service ls && docker service ps traefik --no-trunc" -b --vault-password-file /tmp/vault_pass.txt
          rm -f /tmp/vault_pass.txt

      - name: Verify Wazuh health (basic)
        run: |
          echo -n "$ANSIBLE_VAULT_PASSWORD" > /tmp/vault_pass.txt
          ansible node2 -m shell -a "{% raw %}docker ps --format 'table {{.Names}}\t{{.Status}}'{% endraw %} | grep -E 'wazuh|indexer|manager'" -b --vault-password-file /tmp/vault_pass.txt
          rm -f /tmp/vault_pass.txt

  # ---------------- SELENIUM TESTS ----------------
  test:
    needs: deploy
    runs-on: self-hosted
    # Use the official selenium/standalone-chrome container to run tests remotely‚Å†
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444

    env:
      WAZUH_DASHBOARD_URL: ${{ secrets.WAZUH_DASHBOARD_URL }}
      WAZUH_API_URL: ${{ secrets.WAZUH_API_URL }}
      WAZUH_API_USER: ${{ secrets.WAZUH_API_USER }}
      WAZUH_API_PASS: ${{ secrets.WAZUH_API_PASS }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install dependencies
        run: |
          sudo apt install python3.12-venv
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r tests/selenium/requirements.txt
          
      - name: Run Selenium tests
        run: |
          source .venv/bin/activate
          pytest tests/selenium
        
      - name: Run API health test
        run: |
          source .venv/bin/activate
          pytest tests/api -v
