# This is Wazuh SIEM stuck deployment workflow onto Docker swarm with Github Actions

name: Wazuh Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push event but only for the "main" branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# This workflow contains 5 jobs called "lint", "build", "scan", "test" and "deploy" that run sequentially
jobs:
  # ---------------- LINT STAGE -----------------
  lint:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run YAML Lint
      run: yamllint .

    - name: Run Ansible Lint
      run: ansible-lint .

  # ---------------- BUILD STAGE ----------------
  build:
    # Runs after successfully finishing lint job
    needs: lint
    # The type of runner that the job will run on it
    runs-on: self-hosted
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout repository
        # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4
        
    #  - name: Log in to GitHub Container Registry
    #    uses: docker/login-action@v3
    #    with:
    #      registry: ghcr.io
    #      username: ${{ github.actor }}
    #      password: ${{ secrets.GHCR_PAT }}

      # Build dashboard image
    #  - name: Build dashboard image
    #    run: |
    #      docker build -t ghcr.io/ashbloom12/min-soc/wazuh-dashboard:latest -f docker/Dockerfile docker/

      # Push dashboard image to GHCR
    #  - name: Push Wazuh Dashboard image
    #    run: docker push ghcr.io/ashbloom12/min-soc/wazuh-dashboard:latest
  # ---------------- SECURITY SCAN ----------------
  scan:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Pull official images (specify a version tag if needed)
      - name: Pull Wazuh images
        run: |
          docker pull wazuh/wazuh-manager:4.13.0-beta2
          docker pull wazuh/wazuh-indexer:4.13.0-beta2
          docker pull wazuh/wazuh-dashboard:4.13.0-beta2

      - name: Scan Wazuh Manager
        run: |
          trivy image --ignorefile ./trivy/.trivyignore --format json -o trivy-manager-report.json wazuh/wazuh-manager:4.13.0-beta2
          trivy image --ignorefile ./trivy/.trivyignore --format table wazuh/wazuh-manager:4.13.0-beta2

      - name: Scan Wazuh Indexer
        run: |
          trivy image --ignorefile ./trivy/.trivyignore --format json -o trivy-indexer-report.json wazuh/wazuh-indexer:4.13.0-beta2
          trivy image --ignorefile ./trivy/.trivyignore --format table wazuh/wazuh-indexer:4.13.0-beta2

      - name: Scan Wazuh Dashboard
        run: |
          trivy image --ignorefile ./trivy/.trivyignore --format json -o trivy-dashboard-report.json wazuh/wazuh-dashboard:4.13.0-beta2
          trivy image --ignorefile ./trivy/.trivyignore --format table wazuh/wazuh-dashboard:4.13.0-beta2

      # Always upload reports, even if scan fails
      - name: Upload Trivy reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-dashboard-report.json
            trivy-indexer-report.json
            trivy-manager-report.json

      - name: Fail if CRITICAL or HIGH vulnerabilities found
        if: always()
        run: |
          set -e
          for report in trivy-manager-report.json trivy-indexer-report.json trivy-dashboard-report.json; do
            if jq -e '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL" or .Severity=="HIGH")' "$report" > /dev/null; then
              echo "Critical or High vulnerability detected in $report!"
              exit 1
            fi
          done
  # -------------------- DEPLOY --------------------
  deploy:
    needs: scan
    runs-on: self-hosted
   
    env:
      WAZUH_MANAGER_IMAGE: wazuh/wazuh-manager:4.13.0-beta2
      WAZUH_INDEXER_IMAGE: wazuh/wazuh-indexer:4.13.0-beta2
      WAZUH_DASHBOARD_IMAGE: wazuh/wazuh-indexer:4.13.0-beta2
      ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      GHCR_TOKEN: ${{ secrets.GHCR_PAT }}
      GITHUB_ACTOR: ${{ github.actor }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Show inventory summary
        run: |
          echo "Inventory:"
          cat ansible/inventory/hosts.yml || true

      - name: Pre-flight ping to all nodes
        run: |
          ansible -i ansible/inventory/hosts.yml all -m ping

      - name: Run Ansible deploy playbook
        env:
          ANSIBLE_FORCE_COLOR: "true"
        run: |
          ansible-playbook -i ansible/inventory/hosts.yml playbooks/deploy.yml --vault-password-file <(echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}")

      # Post-deploy checks
      - name: Verify services in Swarm
        run: |
          ansible -i ansible/inventory/hosts.yml node1 -m shell -a "docker service ls && docker service ps traefik --no-trunc" -b

      - name: Verify Wazuh health (basic)
        run: |
          ansible -i ansible/inventory/hosts.yml node2 -m shell -a "docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -E 'wazuh|indexer|manager'" -b

  # ---------------- SELENIUM TESTS ----------------
  test:
    needs: deploy
    runs-on: self-hosted
    # Use the official selenium/standalone-chrome container to run tests remotely⁠
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444

    env:
      WAZUH_DASHBOARD_URL: ${{ secrets.WAZUH_DASHBOARD_URL }}
      WAZUH_API_URL: ${{ secrets.WAZUH_API_URL }}
      WAZUH_API_USER: ${{ secrets.WAZUH_API_USER }}
      WAZUH_API_PASS: ${{ secrets.WAZUH_API_PASS }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install dependencies
        run: |
          pip3 install -r tests/selenium/requirements.txt
          pip3 install requests pytest
          
      - name: Run Selenium tests
        run: pytest tests/selenium -v
        
      - name: Run API health test
        run: pytest tests/api -v
