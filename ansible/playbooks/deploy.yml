# ---------------- Docker installation and setup ----------------
- name: Ensure Docker and prerequisites are installed on all nodes
  hosts: all
  become: true
  gather_facts: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Check if Docker is installed
      ansible.builtin.shell: docker --version
      register: docker_installed
      ignore_errors: true

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      when: docker_installed.rc != 0

    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - aptitude
        state: present
      when: docker_installed.rc != 0

    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: docker_installed.rc != 0

    - name: Download and add Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
        force: true
      when: docker_installed.rc != 0

    - name: Add Docker APT repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
      when: docker_installed.rc != 0

    - name: Install Docker Engine and related packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: docker_installed.rc != 0

    - name: Ensure pip3 is installed
      ansible.builtin.apt:
        name: python3-pip
        state: present

    - name: Install Python Docker SDK
      ansible.builtin.apt:
        name: python3-docker
        state: present

    - name: Ensure python3-jsondiff is installed
      ansible.builtin.apt:
        name: python3-jsondiff
        state: present

    - name: Ensure Docker service is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Add ubuntu user to docker group
      ansible.builtin.user:
        name: ubuntu
        groups: docker
        append: true

# ---------------- GitHub Container Registry login ----------------
- name: Log in to GitHub Container Registry on all nodes
  hosts: all
  become: true
  tasks:
    - name: Login to GHCR
      docker_login:
        registry_url: ghcr.io
        username: "{{ lookup('env', 'GITHUB_ACTOR') }}"
        password: "{{ lookup('env', 'GHCR_TOKEN') }}"

# ---------------- Swarm, networks, Traefik, secrets ----------------
- name: Initialize Swarm, overlay networks, Traefik, and secrets
  hosts: all
  become: true
  roles:
    - swarm-init
    - networks
    - traefik
    - secrets

# ---------------- Wazuh TLS Certificates ----------------
- name: Populate Wazuh TLS certificates into Docker volume
  hosts: node1:node2
  become: true
  vars:
    wazuh_certs_source: "{{ playbook_dir }}/security/tls/wazuh/wazuh-certificates"
    wazuh_certs_volume: wazuh-certs
  roles:
    - wazuh-certs

# ---------------- Deploy Wazuh stack ----------------
- name: Deploy/Update Wazuh Docker stack
  hosts: node1
  become: true
  vars:
    stack_file: "{{ playbook_dir }}/stack/wazuh-stack.yml"
    stack_name: wazuh
  roles:
    - deploy-stack
