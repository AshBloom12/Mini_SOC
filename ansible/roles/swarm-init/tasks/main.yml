# Initialize Docker Swarm on manager
- name: Initialize Swarm (manager)
  docker_swarm:
    state: present
    advertise_addr: "{{ ansible_host }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  register: swarm_init

# Save join tokens on localhost
- name: Save Swarm join tokens
  set_fact:
    manager_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Manager }}"
    worker_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Worker }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  delegate_to: localhost

# Ensure worker nodes leave any existing swarm
- name: Make worker nodes leave any existing swarm
  docker_swarm:
    state: absent
    force: yes
  when: hostvars[inventory_hostname].role == "worker"

# Join worker nodes to the swarm
- name: Join worker nodes to swarm
  docker_swarm:
    state: join
    join_token: "{{ hostvars['localhost'].worker_join_token }}"
    remote_addrs:
      - "{{ hostvars[groups['nodes'] | selectattr('role','equalto','dashboard') | list | first].ansible_host }}"
  when: hostvars[inventory_hostname].role == "worker"

# Wait for worker nodes to appear in the manager
- name: Wait for workers to register in Swarm
  shell: |
    for i in $(seq 1 20); do
      docker node ls | grep -q "{{ inventory_hostname }}" && exit 0
      sleep 5
    done
    exit 1
  delegate_to: "{{ groups['nodes'] | selectattr('role','equalto','dashboard') | list | first }}"
  when: hostvars[inventory_hostname].role == "worker"

# Apply labels to all nodes
- name: Label nodes according to their role
  docker_node:
    hostname: "{{ hostvars[inventory_hostname].ansible_host }}"  # must match Swarm node hostname
    labels:
      role: "{{ hostvars[inventory_hostname].role }}"
  delegate_to: "{{ groups['nodes'] | selectattr('role','equalto','dashboard') | list | first }}"
