# Initialize Docker Swarm on manager
- name: Initialize Swarm (manager)
  docker_swarm:
    state: present
    advertise_addr: "{{ ansible_host }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  register: swarm_init

# Save Swarm join tokens globally (run once)
- name: Save Swarm join tokens
  set_fact:
    manager_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Manager }}"
    worker_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Worker }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  run_once: true

# Ensure workers leave any existing swarm
- name: Ensure worker nodes leave any existing swarm
  docker_swarm:
    state: absent
    force: true
  when: hostvars[inventory_hostname].role == "worker"

# Remove old/duplicate nodes on manager (except current Ready workers)
- name: Remove all duplicate Swarm nodes aggressively
  shell: |
    set -e

    # Remove duplicate nodes by hostname, keep only one "Ready" node per hostname
    for host in $(docker node ls --format '{{.Hostname}}' | sort | uniq -d); do
      echo "Checking duplicates for $host"
      IDS=$(docker node ls --format '{{.ID}} {{.Hostname}} {{.Status}}' | grep " $host" | awk '{print $1":"$3}')
      KEEP=""
      for entry in $IDS; do
        ID=$(echo $entry | cut -d: -f1)
        STATUS=$(echo $entry | cut -d: -f2)
        if [ "$STATUS" = "Ready" ] && [ -z "$KEEP" ]; then
          KEEP=$ID
          echo "Keeping Ready node $ID for $host"
        else
          echo "Removing duplicate node $ID for $host (status=$STATUS)"
          docker node rm -f "$ID" || true
        fi
      done
    done

    # Remove any node that is not "Ready"
    for id in $(docker node ls --format '{{.ID}} {{.Status}}' | awk '$2 != "Ready" {print $1}'); do
      echo "Force removing non-Ready node $id"
      docker node rm -f $id || true
    done

    # Final check for duplicates
    dups=$(docker node ls --format '{{.Hostname}}' | sort | uniq -d)
    if [ -n "$dups" ]; then
      echo "Error: Duplicate nodes still exist: $dups"
      exit 1
    fi

    echo "Swarm node cleanup complete."
  args:
    executable: /bin/bash
  delegate_to: node1
  run_once: true

# Join worker nodes to swarm
- name: Join worker nodes to swarm
  docker_swarm:
    state: join
    join_token: "{{ hostvars['node1'].worker_join_token }}"
    remote_addrs: ["{{ hostvars['node1'].ansible_host }}"]
  when: hostvars[inventory_hostname].role == "worker"

# Wait for workers to appear in Swarm
- name: Wait for workers to register in Swarm
  shell: |
    for i in $(seq 1 30); do
      docker node ls --format '{{"{{.Hostname}}"}}' | grep -q "{{ ansible_hostname }}" && exit 0
      sleep 5
    done
    exit 1
  delegate_to: node1
  when: hostvars[inventory_hostname].role == "worker"

# Label nodes
- name: Label nodes according to their role
  docker_node:
    hostname: "{{ ansible_hostname }}"
    labels:
      role: "{{ hostvars[inventory_hostname].role }}"
  delegate_to: node1
  run_once: false

# Fix Traefik scheduling to use node label
- name: Fix Traefik constraint to use node label
  shell: |
    {% raw %}
    if docker service ls --format '{{.Name}}' | grep -q '^traefik$'; then
      docker service update \
        --constraint-rm 'node.role == dashboard' \
        --constraint-add 'node.labels.role == dashboard' \
        traefik || true
    else
      echo "Traefik service not found, skipping update"
    fi
    {% endraw %}
  delegate_to: node1
  run_once: true
