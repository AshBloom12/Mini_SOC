# Initialize Docker Swarm on manager
- name: Initialize Swarm (manager)
  docker_swarm:
    state: present
    advertise_addr: "{{ ansible_host }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  register: swarm_init

# Save Swarm join tokens globally (run once)
- name: Save Swarm join tokens
  set_fact:
    manager_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Manager }}"
    worker_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Worker }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  run_once: true

# Ensure workers leave any existing swarm
- name: Ensure worker nodes leave any existing swarm
  docker_swarm:
    state: absent
    force: true
  when: hostvars[inventory_hostname].role == "worker"

# Remove old/duplicate nodes on manager (except current Ready workers)
- name: Remove all Down and duplicate nodes except current Ready nodes
  shell: |
    docker node ls --format '{{"{{.ID}}"}} {{"{{.Hostname}}"}} {{"{{.Status}}"}}' | awk '$3=="Down"{print $1}' | while read NODE_ID; do
      docker node rm "$NODE_ID" || true
    done
  delegate_to: node1
  run_once: true

# Join worker nodes to swarm
- name: Join worker nodes to swarm
  docker_swarm:
    state: join
    join_token: "{{ hostvars['node1'].worker_join_token }}"
    remote_addrs: ["{{ hostvars['node1'].ansible_host }}"]
  when: hostvars[inventory_hostname].role == "worker"

# Wait for workers to appear in Swarm
- name: Wait for workers to register in Swarm
  shell: |
    for i in $(seq 1 30); do
      docker node ls --format '{{"{{.Hostname}}"}}' | grep -q "{{ ansible_hostname }}" && exit 0
      sleep 5
    done
    exit 1
  delegate_to: "node1"
  when: hostvars[inventory_hostname].role == "worker"

# Label nodes
- name: Label nodes according to their role
  docker_node:
    hostname: "{{ ansible_hostname }}"
    labels:
      role: "{{ hostvars[inventory_hostname].role }}"
  delegate_to: "node1"

# Fix Traefik scheduling to use node label
- name: Fix Traefik constraint to use node label
  shell: |
    docker service update \
      --constraint-rm 'node.role == dashboard' \
      --constraint-add 'node.labels.role == dashboard' \
      traefik || true
  delegate_to: node1
  run_once: true
