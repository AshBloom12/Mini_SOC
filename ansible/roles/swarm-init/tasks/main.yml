- name: Initialize Swarm (manager)
  docker_swarm:
    state: present
    advertise_addr: "{{ ansible_host }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  register: swarm_init

- name: Save Swarm join tokens
  set_fact:
    manager_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Manager }}"
    worker_join_token: "{{ swarm_init.swarm_facts.JoinTokens.Worker }}"
  when: hostvars[inventory_hostname].role == "dashboard"
  run_once: true

- name: Ensure worker nodes leave any existing swarm
  docker_swarm:
    state: absent
    force: true
  when: hostvars[inventory_hostname].role == "worker"

- name: Join worker nodes to swarm
  docker_swarm:
    state: join
    join_token: "{{ hostvars['node1'].worker_join_token }}"
    remote_addrs: ["{{ hostvars['node1'].ansible_host }}"]
  when: hostvars[inventory_hostname].role == "worker"

- name: Wait for workers to register in Swarm
  shell: |
    for i in $(seq 1 30); do
      docker node ls --format '{{"{{.Hostname}}"}}' | grep -q "{{ ansible_hostname }}" && exit 0
      sleep 5
    done
    exit 1
  delegate_to: node1
  when: hostvars[inventory_hostname].role == "worker"

- name: Label nodes according to their role
  docker_node:
    hostname: "{{ ansible_hostname }}"
    labels:
      role: "{{ hostvars[inventory_hostname].role }}"
  delegate_to: node1
  run_once: false

- name: Fix Traefik scheduling to use node label
  shell: |
    {% raw %}
    if docker service ls --format '{{.Name}}' | grep -q '^traefik$'; then
      docker service update \
        --constraint-rm 'node.role == dashboard' \
        --constraint-add 'node.labels.role == dashboard' \
        traefik || true
    fi
    {% endraw %}
  delegate_to: node1
  run_once: true
