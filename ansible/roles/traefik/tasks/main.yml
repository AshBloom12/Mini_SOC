- name: Create Traefik overlay network
  docker_network:
    name: "{{ traefik_network }}"
    driver: overlay
    scope: swarm
    attachable: true
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Ensure Traefik config directory exists
  file:
    path: /etc/traefik
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Ensure certs directory exists
  file:
    path: /etc/traefik/certs
    state: directory
    owner: root
    group: root
    mode: '0700'
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Deploy TLS certificate
  copy:
    content: "{{ traefik_certificate }}"
    dest: "{{ traefik_cert_file }}"
    owner: root
    group: root
    mode: '0600'
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Deploy TLS private key
  copy:
    content: "{{ traefik_private_key }}"
    dest: "{{ traefik_key_file }}"
    owner: root
    group: root
    mode: '0600'
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Copy Traefik static config
  copy:
    src: "{{ traefik_static_src }}"
    dest: "{{ traefik_static_file }}"
    owner: root
    group: root
    mode: '0644'
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Copy Traefik dynamic config
  copy:
    src: "{{ traefik_dynamic_src }}"
    dest: "{{ traefik_dynamic_file }}"
    owner: root
    group: root
    mode: '0644'
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Deploy Traefik Swarm service
  docker_swarm_service:
    name: traefik
    image: traefik:v2.11
    networks:
      - name: "{{ traefik_network }}"
    publish:
      - published_port: 80
        target_port: 80
      - published_port: 443
        target_port: 443
    mounts:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
      - source: "{{ traefik_static_file }}"
        target: /etc/traefik/traefik.yml
        type: bind
      - source: "{{ traefik_dynamic_file }}"
        target: /etc/traefik/dynamic.yml
        type: bind
      - source: /etc/traefik/certs
        target: /certs
        type: bind
    mode: replicated
    replicas: 1
    placement:
      constraints:
        - node.labels.role == dashboard
    update_config:
      parallelism: 1
      delay: 10s
      failure_action: continue
    restart_config:
      condition: any
      delay: 5s
      max_attempts: 10
      window: 60s
  when: hostvars[inventory_hostname].role == "dashboard"

- name: Wait for Traefik to become healthy
  shell: |
    {% raw %}
    until [ $(docker service ps traefik --format '{{.CurrentState}}' | grep -c Running) -eq 1 ]; do
      echo "Waiting for Traefik..."
      sleep 5
    done
    {% endraw %}
  delegate_to: node1
  run_once: true
